// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: imageproxy.proto

package imageproxy

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageproxyClient is the client API for Imageproxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageproxyClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
}

type imageproxyClient struct {
	cc grpc.ClientConnInterface
}

func NewImageproxyClient(cc grpc.ClientConnInterface) ImageproxyClient {
	return &imageproxyClient{cc}
}

func (c *imageproxyClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/v1.imageproxy.Imageproxy/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageproxyClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, "/v1.imageproxy.Imageproxy/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageproxyServer is the server API for Imageproxy service.
// All implementations should embed UnimplementedImageproxyServer
// for forward compatibility
type ImageproxyServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
}

// UnimplementedImageproxyServer should be embedded to have forward compatible implementations.
type UnimplementedImageproxyServer struct {
}

func (UnimplementedImageproxyServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedImageproxyServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}

// UnsafeImageproxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageproxyServer will
// result in compilation errors.
type UnsafeImageproxyServer interface {
	mustEmbedUnimplementedImageproxyServer()
}

func RegisterImageproxyServer(s grpc.ServiceRegistrar, srv ImageproxyServer) {
	s.RegisterService(&Imageproxy_ServiceDesc, srv)
}

func _Imageproxy_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageproxyServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.imageproxy.Imageproxy/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageproxyServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imageproxy_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageproxyServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.imageproxy.Imageproxy/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageproxyServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Imageproxy_ServiceDesc is the grpc.ServiceDesc for Imageproxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Imageproxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.imageproxy.Imageproxy",
	HandlerType: (*ImageproxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Imageproxy_HealthCheck_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Imageproxy_GetImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imageproxy.proto",
}
